import socket
import smbus
import math
import time
import RPi.GPIO as GPIO

power_mgmt_1 = 0x6b
power_mgmt_2 = 0x6c

bus = smbus.SMBus(1)
address = 0x68

bus.write_byte_data(address, power_mgmt_1, 0)

HOST =  '192.168.254.110'
PORT = 5560       # Port to listen on (non-privileged ports are > 1023

GPIO.setmode(GPIO.BCM)

#set GPIO Pins
GPIO_TRIGGER = 18
GPIO_ECHO = 24
GPIO_TRIGGER1 = 21
GPIO_ECHO1 = 26

#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.setwarnings(False)
GPIO.setup(GPIO_TRIGGER1, GPIO.OUT)
GPIO.setup(GPIO_ECHO1, GPIO.IN)
GPIO.setwarnings(False)
GPIO.setup(20,  GPIO.OUT)
GPIO.setup(19, GPIO.IN)
GPIO.setwarnings(False)
GPIO.setup(16,  GPIO.OUT)
GPIO.setup(13, GPIO.IN)
GPIO.setwarnings(False)

#for sensor 1
def distance():
    GPIO.output(GPIO_TRIGGER, True)

    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)

    StartTime = time.time()
    StopTime = time.time()

    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()

    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()

    TimeElapsed = StopTime - StartTime
    distance = (TimeElapsed * 34300) / 2

    return distance

#for sensor 2
def distance1():
    GPIO.output(GPIO_TRIGGER1, True)

    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER1, False)

    StartTime = time.time()
    StopTime = time.time()

    while GPIO.input(GPIO_ECHO1) == 0:
        StartTime = time.time()

    while GPIO.input(GPIO_ECHO1) == 1:
        StopTime = time.time()

    TimeElapsed = StopTime - StartTime
    distance = (TimeElapsed * 34300) / 2

    return distance

#for sensor 3
def distance2():
    GPIO.output(20, True)

    time.sleep(0.00001)
    GPIO.output(20, False)

    StartTime = time.time()
    StopTime = time.time()

    while GPIO.input(19) == 0:
        StartTime = time.time()

    while GPIO.input(19) == 1:
        StopTime = time.time()

    TimeElapsed = StopTime - StartTime
    distance = (TimeElapsed * 34300) / 2

    return distance

#for sensor 4
def distance3():
    GPIO.output(16, True)

    time.sleep(0.00001)
    GPIO.output(16, False)

    StartTime = time.time()
    StopTime = time.time()

    while GPIO.input(13) == 0:
        StartTime = time.time()

    while GPIO.input(13) == 1:
        StopTime = time.time()

    TimeElapsed = StopTime - StartTime
    distance = (TimeElapsed * 34300) / 2

    return distance

def read_byte(reg):
    return bus.read_byte_data(address, reg)

def read_word(reg):
    h = bus.read_byte_data(address, reg)
    l = bus.read_byte_data(address, reg+1)
    value = (h <<8) +1
    return value

def read_word_2c(reg):
    val = read_word(reg)
    if (val >=0x8000):
        return -((65536 - val)+1)
    else:
        return val

def dist(a,b):
    return math.sqrt((a*a)+(b*b))

def y_rotation(x,y,z):
    radians = math.atan2(x, dist(y,z))
    return -math.degrees(radians)

def x_rotation(x,y,z):
    radians = math.atan2(y, dist(x,z))
    return math.degrees(radians)

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen()
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        while True:
            rox = read_word_2c(0x3b)
            roy = read_word_2c(0x3d)
            roz = read_word_2c(0x3f)

            rfx = rox/16384.0
            rfy = roy/16384.0
            rfz = roz/16384.0

            dist1 = distance()
            dist2 = distance1()
            dist3 = distance2()
            dist4 = distance3()

            if (rfx >= 0.4 and (dist1 > 30 and dist2 > 30)):
                conn.send(b'forward')
                time.sleep(1)
                continue
  #              if (rfy >= 0.4):
   #                 conn.sendall(b'left')
   #             if (rfy <= -0.4):
  #                  conn.sendall(b'right')
            if (rfx <= -0.3 and (dist3 > 30 and dist4 > 30 )):
                conn.sendall(b'backward')
                time.sleep(1)
                continue
 #               if (rfy >= 0.4):
  #                  conn.sendall(b'left')
   #             if (rfy <= -0.4):
   #                 conn.sendall(b'right')
            if (rfy >= 0.4 and rfx< 0.4 and rfx > -0.3):
                conn.sendall(b'left')
                time.sleep(1)
                continue

            if (rfy <= -0.4 and rfx< 0.4 and rfx > -0.3):
                conn.sendall(b'right')
                time.sleep(1)
                continue

            conn.sendall(b'stop')
            time.sleep(1)
#            data = conn.recv(1024)

#            if not data:
#                break
